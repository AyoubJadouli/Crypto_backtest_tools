{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Model Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/UltimeTradingBot/Crypto_backtest_tools\n"
     ]
    }
   ],
   "source": [
    "%cd '/UltimeTradingBot/Crypto_backtest_tools'\n",
    "VERSION=1\n",
    "TESTING_MOD=False\n",
    "JUST_IMPORT_DATA=False\n",
    "#Normalization_File='w15_NoVol_Normalization.json'\n",
    "#Model_FileName='w15_NoVol_XcryptoAi_model.hdf5'\n",
    "ALLHIST_FILE='Results_history.json'\n",
    "DATA_DIR='/UltimeTradingBot/Data/'\n",
    "FIRST_NORM_FLAG=True\n",
    "WINDOW_SIZE=20\n",
    "BUY_PERCENT=0.5\n",
    "DATA_DIR='/UltimeTradingBot/Data'\n",
    "MAX_FORCAST_SIZE=7\n",
    "Normalization_File=f'{DATA_DIR}/00{int(BUY_PERCENT*10)}_w{WINDOW_SIZE}_max{MAX_FORCAST_SIZE}min_Norm_v{VERSION}.json'\n",
    "Model_FileName=f'{DATA_DIR}/00{int(BUY_PERCENT*10)}_w{WINDOW_SIZE}_max{MAX_FORCAST_SIZE}min_Model_v{VERSION}.hdf5'\n",
    "DATA_FILE=f'{DATA_DIR}/00{int(BUY_PERCENT*10)}_w{WINDOW_SIZE}_max{MAX_FORCAST_SIZE}min_Data_v{VERSION}.csv'\n",
    "window=WINDOW_SIZE\n",
    "SELL_PERCENT=0.30\n",
    "NORM_FILE=Normalization_File\n",
    "MODEL_FILE=Model_FileName\n",
    "\n",
    "#DATA_FILE=DATA_DIR+'w'+str(WINDOW_SIZE)+'_EXTData.csv'\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/UltimeTradingBot/Crypto_backtest_tools\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-03 18:18:49.871902: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-10-03 18:18:50.042471: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('/UltimeTradingBot/Crypto_backtest_tools')\n",
    "%cd '/UltimeTradingBot/Crypto_backtest_tools'\n",
    "import pandas as pd\n",
    "import json\n",
    "import time\n",
    "import timeit\n",
    "import numpy as np\n",
    "import urllib\n",
    "#import ccxt\n",
    "import  ccxt  \n",
    "import random\n",
    "from keras.models import load_model\n",
    "import os\n",
    "import asyncio\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Garbage collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "import gc\n",
    "gc.collect()    \n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "PRERR=False\n",
    "def prerr(err):\n",
    "    if PRERR:\n",
    "        print(\"\\033[0;31m Error in \"+str(sys._getframe().f_code.co_name) +\" \\033[0;33m\"+str(err))\n",
    "\n",
    "PDEBUG=True\n",
    "def pdebug(err):\n",
    "    if PDEBUG:\n",
    "        print(\"\\033[0;31m Error in \"+str(sys._getframe().f_code.co_name) +\" \\033[0;33m\"+str(err))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gloabale variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "Normalization=None\n",
    "Model_FileName=Model_FileName\n",
    "Normalization_File=Normalization_File\n",
    "Binance_USDT_HALAL = [\n",
    "    \"LUNA/USDT\",\n",
    "    \"ETH/USDT\",\n",
    "    \"GMT/USDT\",\n",
    "    \"UST/USDT\",\n",
    "    \"SOL/USDT\",\n",
    "    \"APE/USDT\",\n",
    "    \"XRP/USDT\",\n",
    "    \"IDEX/USDT\",\n",
    "    \"AVAX/USDT\",\n",
    "    \"DOT/USDT\",\n",
    "    \"ADA/USDT\",\n",
    "    \"JASMY/USDT\",\n",
    "    \"TRX/USDT\",\n",
    "    \"NEAR/USDT\",\n",
    "    \"AXS/USDT\",\n",
    "    \"GAL/USDT\",\n",
    "    \"GALA/USDT\",\n",
    "    \"SHIB/USDT\",\n",
    "    \"ZIL/USDT\",\n",
    "    \"ENS/USDT\",\n",
    "    \"DOGE/USDT\",\n",
    "    \"LTC/USDT\",\n",
    "    \"EUR/USDT\",\n",
    "    \"MANA/USDT\",\n",
    "    \"DAR/USDT\",\n",
    "    \"WAVES/USDT\",\n",
    "    \"LAZIO/USDT\",\n",
    "    \"ALICE/USDT\",\n",
    "    \"ROSE/USDT\",\n",
    "    \"ZEC/USDT\",\n",
    "    \"ALGO/USDT\",\n",
    "    \"GRT/USDT\",\n",
    "    \"PSG/USDT\",\n",
    "    \"SLP/USDT\",\n",
    "    \"EOS/USDT\",\n",
    "    \"PORTO/USDT\",\n",
    "    \"ICP/USDT\",\n",
    "    \"EGLD/USDT\",\n",
    "    \"XMR/USDT\",\n",
    "    \"KDA/USDT\",\n",
    "    \"ETC/USDT\",\n",
    "    \"MBOX/USDT\",\n",
    "    \"OGN/USDT\",\n",
    "    \"AR/USDT\",\n",
    "    \"GLMR/USDT\",\n",
    "    \"LOKA/USDT\",\n",
    "    \"XLM/USDT\",\n",
    "    \"MTL/USDT\",\n",
    "    \"SNX/USDT\",\n",
    "    \"PYR/USDT\",\n",
    "    \"DASH/USDT\",\n",
    "    \"CITY/USDT\",\n",
    "    \"ASTR/USDT\",\n",
    "    \"IOTA/USDT\",\n",
    "    \"ACM/USDT\",\n",
    "    \"BAR/USDT\",\n",
    "    \"JUV/USDT\",\n",
    "    \"SYS/USDT\",\n",
    "    \"RVN/USDT\",\n",
    "    \"MBL/USDT\",\n",
    "    \"REN/USDT\",\n",
    "    \"JST/USDT\",\n",
    "    \"OMG/USDT\",\n",
    "    \"ATM/USDT\",\n",
    "    \"XEC/USDT\",\n",
    "    \"STORJ/USDT\",\n",
    "    \"ZRX/USDT\",\n",
    "    \"SRM/USDT\",\n",
    "    \"ICX/USDT\",\n",
    "    \"API3/USDT\",\n",
    "    \"ONT/USDT\",\n",
    "    \"SKL/USDT\",\n",
    "    \"MULTI/USDT\",\n",
    "    \"QTUM/USDT\",\n",
    "    \"COCOS/USDT\",\n",
    "    \"VOXEL/USDT\",\n",
    "    \"HIVE/USDT\",\n",
    "    \"KP3R/USDT\",\n",
    "    \"ATA/USDT\",\n",
    "    \"STMX/USDT\",\n",
    "    \"ADX/USDT\",\n",
    "    \"HIGH/USDT\",\n",
    "    \"NULS/USDT\",\n",
    "    \"MLN/USDT\",\n",
    "    \"YGG/USDT\",\n",
    "    \"SC/USDT\",\n",
    "    \"CKB/USDT\",\n",
    "    \"TOMO/USDT\",\n",
    "    \"STX/USDT\",\n",
    "    \"FLUX/USDT\",\n",
    "    \"DNT/USDT\",\n",
    "    \"ORN/USDT\",\n",
    "    \"PLA/USDT\",\n",
    "    \"BADGER/USDT\",\n",
    "    \"DF/USDT\",\n",
    "    \"MOB/USDT\",\n",
    "    \"LPT/USDT\",\n",
    "    \"SCRT/USDT\",\n",
    "    \"RAD/USDT\",\n",
    "    \"NMR/USDT\",\n",
    "    \"ELF/USDT\",\n",
    "    \"TORN/USDT\",\n",
    "    \"T/USDT\",\n",
    "    \"QUICK/USDT\",\n",
    "    \"LSK/USDT\",\n",
    "    \"FIDA/USDT\",\n",
    "    \"XNO/USDT\",\n",
    "    \"BTG/USDT\",\n",
    "    \"GHST/USDT\",\n",
    "    \"EPS/USDT\"\n",
    "]\n",
    "\n",
    "pair_list = Binance_USDT_HALAL\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Local Functions first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# Get list of all IDs on binance\n",
    "def give_first_kline_open_stamp(interval, symbol, start_ts=1499990400000):\n",
    "        '''\n",
    "        Returns the first kline from an interval and start timestamp and symbol\n",
    "        :param interval:  1w, 1d, 1m etc - the bar length to query\n",
    "        :param symbol:    BTCUSDT or LTCBTC etc\n",
    "        :param start_ts:  Timestamp in miliseconds to start the query from\n",
    "        :return:          The first open candle timestamp\n",
    "        '''\n",
    "\n",
    "        url_stub = \"http://api.binance.com/api/v1/klines?interval=\"\n",
    "\n",
    "        #/api/v1/klines?interval=1m&startTime=1536349500000&symbol=ETCBNB\n",
    "        addInterval   = url_stub     + str(interval) + \"&\"\n",
    "        addStarttime  = addInterval   + \"startTime=\"  + str(start_ts) + \"&\"\n",
    "        addSymbol     = addStarttime + \"symbol=\"     + str(symbol)\n",
    "        url_to_get = addSymbol\n",
    "\n",
    "        kline_data = urllib.request.urlopen(url_to_get).read().decode(\"utf-8\")\n",
    "        kline_data = json.loads(kline_data)\n",
    "\n",
    "        return kline_data[0][0]\n",
    "\n",
    "def get_crypto_metadata(pair_list):\n",
    "    Binance_USDT_HALAL=pair_list\n",
    "    ids = []\n",
    "    #ids = all_ids()\n",
    "    for halalpair in Binance_USDT_HALAL:\n",
    "    #    print( halalpair.replace('/',''))\n",
    "        ids.append(halalpair.replace('/',''))\n",
    "    #print(ids)\n",
    "    MetaData=pd.DataFrame(ids)\n",
    "    MetaData[\"Pair\"]=Binance_USDT_HALAL\n",
    "    counters=0\n",
    "    for this_id in ids:\n",
    "        '''\n",
    "        Find launch Week of symbol, start at Binance launch date 2017-07-14 (1499990400000)\n",
    "        Find launch Day of symbol in week\n",
    "        Find launch minute of symbol in day\n",
    "        '''\n",
    "\n",
    "        symbol_launch_week_stamp   = give_first_kline_open_stamp('1w', this_id, 1499990400000 )\n",
    "        symbol_launch_day_stamp    = give_first_kline_open_stamp('1d', this_id, symbol_launch_week_stamp)\n",
    "        symbol_launch_minute_stamp = give_first_kline_open_stamp('1m', this_id, symbol_launch_day_stamp)\n",
    "        MetaData.loc[counters,\"launch_week_stamp\"]=str(symbol_launch_week_stamp)\n",
    "        MetaData.loc[counters,\"launch_day_stamp\"]=str(symbol_launch_day_stamp)\n",
    "        MetaData.loc[counters,\"launch_minute\"]=pd.to_datetime(symbol_launch_minute_stamp, unit='ms')\n",
    "\n",
    "        counters += 1\n",
    "\n",
    "        #print(\"Week stamp\", symbol_launch_week_stamp)\n",
    "        #print(\"Day  stamp\", symbol_launch_day_stamp)\n",
    "        #print(\"Min  stamp\", symbol_launch_minute_stamp)\n",
    "        print(counters,end=\" \")\n",
    "        #print(this_id, \"launched\", symbol_launch_minute_stamp )\n",
    "    return MetaData\n",
    "    #print(\"\")\n",
    "    \n",
    "def normalize(dataset,file=Normalization_File):\n",
    "    global Normalization\n",
    "    try:\n",
    "        N=Normalization\n",
    "    except:\n",
    "        Normalization=None\n",
    "    if(Normalization==None):\n",
    "        #print('Loading normalization from file')\n",
    "        with open(file) as json_file:\n",
    "            Normalization = json.load(json_file)\n",
    "    else:\n",
    "        #print('normalization is loaded')\n",
    "        pass\n",
    "\n",
    "    mean=np.array(Normalization[\"mean\"])\n",
    "    std=np.array(Normalization[\"std\"])\n",
    "    dataset -= mean \n",
    "    dataset /= std\n",
    "    return(dataset)\n",
    "\n",
    "def Buy_Dessision(input):\n",
    "    A=np.array(input)\n",
    "    A = A.reshape(1,A.shape[0])\n",
    "    predictions = model.predict(normalize(A))\n",
    "    rounded = [round(x[0]) for x in predictions]\n",
    "    return(rounded[0])\n",
    "\n",
    "def Buy_Dessision_Normalized(input):\n",
    "    A=np.array(input)\n",
    "    A = A.reshape(1,A.shape[0])\n",
    "    predictions = model.predict(A)\n",
    "    rounded = [round(x[0]) for x in predictions]\n",
    "    return(rounded[0])\n",
    "\n",
    "def Buy_Dessision_Multi_In_Out(input):\n",
    "    A=np.array(input)\n",
    "    predictions = model.predict(normalize(A))\n",
    "    rounded = [round(x[0]) for x in predictions]\n",
    "    return(rounded)\n",
    "\n",
    "def Buy_Dessision_Multi_In_Out_Normalized(input):\n",
    "    A=np.array(input)\n",
    "    predictions = model.predict(A)\n",
    "    rounded = [round(x[0]) for x in predictions]\n",
    "    return(rounded)\n",
    "\n",
    "def instant_pair_data(pair=\"GMT/BUSD\",exchange=ccxt.binance(),window=WINDOW_SIZE):\n",
    "    ex=exchange\n",
    "    ticker = ex.fetch_ticker(pair)\n",
    "    pair_current_price=ticker['info']['askPrice']\n",
    "    #print(pair_current_price)\n",
    "\n",
    "    ohlcv1m = ex.fetch_ohlcv(pair, '1m', limit=window)\n",
    "    ohlcv5m = ex.fetch_ohlcv(pair, '5m', limit=window)\n",
    "    ohlcv15m = ex.fetch_ohlcv(pair, '15m', limit=window)\n",
    "    ohlcv1h = ex.fetch_ohlcv(pair, '1h', limit=window)\n",
    "    ohlcv1d = ex.fetch_ohlcv(pair, '1d', limit=window)\n",
    "\n",
    "    pair_data=pd.DataFrame()\n",
    "    pair_data.loc[0,\"price\"]=float(pair_current_price)\n",
    "    #minute\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)]=ohlcv1m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)]=ohlcv1m[-window_i-1][3]\n",
    "        pair_data.loc[0,\"open-\"+str(window_i)]=ohlcv1m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)]=ohlcv1m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)]=ohlcv1m[-window_i-1][5]\n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][3]\n",
    "        pair_data.loc[0,\"open-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][3]\n",
    "        pair_data.loc[0,\"open-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][3]\n",
    "        pair_data.loc[0,\"open-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_15min\"]=ohlcv5m[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][3]\n",
    "        pair_data.loc[0,\"open-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][5]  \n",
    "    return  pair_data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting Vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    MetaData=pd.read_csv(\"../Data/MetaData.csv\")\n",
    "except:\n",
    "    MetaData=get_crypto_metadata(Binance_USDT_HALAL)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## loding the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-03 18:23:39.579899: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/UltimeTradingBot/Data/005_w20_max7min_Model_v1.hdf5 Loaded\n"
     ]
    }
   ],
   "source": [
    "model = load_model(Model_FileName)\n",
    "print(Model_FileName+' Loaded')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "996\n"
     ]
    }
   ],
   "source": [
    "with open(Normalization_File) as json_file:\n",
    "            Normalization = json.load(json_file)\n",
    "print(len(Normalization['mean']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "996"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(Normalization[\"mean\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "Exchange=ccxt.binance()\n",
    "ex=Exchange\n",
    "exchange=Exchange\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# bitcoin_ticker = Exchange.fetch_ticker('BTC/USDT')\n",
    "# btc_current_price=bitcoin_ticker['info']['askPrice']\n",
    "# print(btc_current_price)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# li1 = df.keys().values.tolist()\n",
    "# li2 = fulldata.keys().values.tolist()\n",
    " \n",
    "# s = set(li2)\n",
    "# temp3 = [x for x in li1 if x not in s]\n",
    "# print(temp3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Working Fonctions Deffinition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1664755200000, 19057.59, 19720.0, 18960.0, 19632.33, 112321.77083]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "window_i=1\n",
    "\n",
    "ex.fetch_ohlcv(\"BTC/BUSD\", '1d', limit=6)[-window_i-1-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "def instant_pair_data(pair=\"GMT/BUSD\",exchange=ccxt.binance(),window=WINDOW_SIZE):\n",
    "    ex=exchange\n",
    "    ticker = ex.fetch_ticker(pair)\n",
    "    pair_current_price=ticker['info']['askPrice']\n",
    "    #print(pair_current_price)\n",
    "\n",
    "    ohlcv1m = ex.fetch_ohlcv(pair, '1m', limit=window+1)\n",
    "    ohlcv5m = ex.fetch_ohlcv(pair, '5m', limit=window+1)\n",
    "    ohlcv15m = ex.fetch_ohlcv(pair, '15m', limit=window+1)\n",
    "    ohlcv1h = ex.fetch_ohlcv(pair, '1h', limit=window+1)\n",
    "    ohlcv1d = ex.fetch_ohlcv(pair, '1d', limit=window+1)\n",
    "\n",
    "    pair_data=pd.DataFrame()\n",
    "    pair_data.loc[0,\"price\"]=float(pair_current_price)\n",
    "    #minute\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)]=ohlcv1m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)]=ohlcv1m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)]=ohlcv1m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)]=ohlcv1m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)]=ohlcv1m[-window_i-1][5]\n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][4]\n",
    "        #if(window_i!=1):\n",
    "        pair_data.loc[0,\"volume-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][4]\n",
    "        #if(window_i!=1):\n",
    "        pair_data.loc[0,\"volume-\"+str(window_i)+\"_15min\"]=ohlcv5m[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][4]\n",
    "        #if(window_i!=1):\n",
    "        pair_data.loc[0,\"volume-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][5]\n",
    "\n",
    "    return  pair_data\n",
    "\n",
    "def instant_full_data(pair,exchange=ex,window=WINDOW_SIZE):\n",
    "    start = timeit.default_timer()\n",
    "\n",
    "    pdata=instant_pair_data(pair,exchange=exchange,window=WINDOW_SIZE)\n",
    "    btcdata=instant_pair_data(\"BTC/USDT\",exchange=exchange,window=WINDOW_SIZE).add_prefix(\"BTC_\")\n",
    "    Timestamp=pd.to_datetime(ex.fetchTime(),unit='ms')\n",
    "    pdata=pd.concat([pdata,btcdata],axis=1)\n",
    "    pdata.loc[0,\"day\"]=Timestamp.dayofweek+1\n",
    "    pdata.loc[0,\"hour\"]=Timestamp.hour\n",
    "    pdata.loc[0,\"minute\"]=Timestamp.minute\n",
    "    stop = timeit.default_timer()\n",
    "    print(\"synctime for \"+str(pair)+\" :\"+str(stop-start))\n",
    "    try:\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MetaData[MetaData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    except:\n",
    "        MData=get_crypto_metadata([pair.split(\"/\")[0]+\"/USDT\"])\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MData[MData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    for key in pdata.keys():\n",
    "        if key.find(\"BTC\")!=-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"BTC_price\"]-pdata[key])/pdata[\"BTC_price\"]\n",
    "        if key.find(\"BTC\")==-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"price\"]-pdata[key])/pdata[\"price\"]\n",
    "    return pdata\n",
    "\n",
    "\n",
    "import asyncio\n",
    "PRERR=False\n",
    "\n",
    "\n",
    "import timeit\n",
    "\n",
    "window=WINDOW_SIZE\n",
    "async def do_ohlcv1m(pair,window,ohlcv1m):\n",
    "    # prerr(\"Preparing 1 minute candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ohlcv1m.extend(ex.fetch_ohlcv(pair, '1m', limit=window+1))\n",
    "    # prerr(\"-->  1 minute candelstics is ok <--\")\n",
    "async def do_ohlcv5m(pair,window,ohlcv1m):\n",
    "    # prerr(\"Preparing 5 minutes candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ohlcv1m.extend(ex.fetch_ohlcv(pair, '5m', limit=window+1))\n",
    "    # prerr(\"-->  5 minutes candelstics is ok <--\")\n",
    "async def do_ohlcv15m(pair,window,ohlcv1m):\n",
    "    # prerr(\"Preparing 15 minutes candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ohlcv1m.extend(ex.fetch_ohlcv(pair, '15m', limit=window+1))\n",
    "    # prerr(\"-->  15 minutes candelstics is ok <--\")\n",
    "async def do_ohlcv1h(pair,window,ohlcv1m):\n",
    "    # prerr(\"Preparing 1 hour candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ohlcv1m.extend(ex.fetch_ohlcv(pair, '1h', limit=window+1))\n",
    "    # prerr(\"-->  1 hour candelstics is ok <--\")\n",
    "async def do_ohlcv1d(pair,window,ohlcv1m):\n",
    "    # prerr(\"Preparing 1 day candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ohlcv1m.extend(ex.fetch_ohlcv(pair, '1d', limit=window+1))\n",
    "    # prerr(\"-->  1 day candelstics is ok <--\")\n",
    "\n",
    "async def do_get_ask_price(pair,price):\n",
    "    # prerr(\"Preparing 1 day candelstics\")\n",
    "    await asyncio.sleep(0)\n",
    "    ticker = ex.fetch_ticker(pair)\n",
    "    price[0]+=float(ticker['info']['askPrice'])\n",
    "    # prerr(\"-->  1 day candelstics is ok <--\")\n",
    "\n",
    "\n",
    "\n",
    "async def async_instant_pair_data(pair=\"GMT/BUSD\",exchange=ccxt.binance(),window=WINDOW_SIZE,pdata=pd.DataFrame()):\n",
    "    #pair_data=pd.DataFrame()    \n",
    "    \n",
    "    pair_data=pdata\n",
    "    ex=exchange\n",
    "\n",
    "    ppp=[float(0)]\n",
    "    #print(pair_current_price)\n",
    "    ohlcv1m = []\n",
    "    ohlcv5m = []\n",
    "    ohlcv15m = []\n",
    "    ohlcv1h = []\n",
    "    ohlcv1d = []\n",
    "\n",
    "    task_askprice = asyncio.create_task(do_get_ask_price(pair,ppp))\n",
    "    task_ohlcv1m = asyncio.create_task(do_ohlcv1m(pair,window,ohlcv1m))\n",
    "    task_ohlcv5m = asyncio.create_task(do_ohlcv5m(pair,window,ohlcv5m))\n",
    "    task_ohlcv15m = asyncio.create_task(do_ohlcv15m(pair,window,ohlcv15m))\n",
    "    task_ohlcv1h = asyncio.create_task(do_ohlcv1h(pair,window,ohlcv1h))\n",
    "    task_ohlcv1d = asyncio.create_task(do_ohlcv1d(pair,window,ohlcv1d))\n",
    "\n",
    "    await asyncio.wait([task_askprice,task_ohlcv1m,task_ohlcv5m,task_ohlcv15m,task_ohlcv1h,task_ohlcv1d])\n",
    "    pair_current_price=ppp[0]\n",
    "    #print(\"task1d   \"+str(ohlcv1d))\n",
    "\n",
    "    pair_data.loc[0,\"price\"]=float(pair_current_price)\n",
    "    #minute\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)]=ohlcv1m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)]=ohlcv1m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)]=ohlcv1m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)]=ohlcv1m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)]=ohlcv1m[-window_i-1][5]\n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_day\"]=ohlcv1d[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_hour\"]=ohlcv1h[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_15min\"]=ohlcv15m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_15min\"]=ohlcv5m[-window_i-1][5]  \n",
    "\n",
    "    for window_i in range(1,window+1):\n",
    "        pair_data.loc[0,\"high-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][2]\n",
    "        pair_data.loc[0,\"low-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][3]\n",
    "        #pair_data.loc[0,\"open-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][1]\n",
    "        pair_data.loc[0,\"close-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][4]\n",
    "        if(window_i!=1):pair_data.loc[0,\"volume-\"+str(window_i)+\"_5min\"]=ohlcv5m[-window_i-1][5]  \n",
    "    return  pair_data\n",
    "\n",
    "\n",
    "\n",
    "async def do_pdata(pair,exchange,window=WINDOW_SIZE,pdata=pd.DataFrame()):\n",
    "    # prerr(\"Preparing 1 day candelstics\")\n",
    "    await async_instant_pair_data(pair=pair,exchange=exchange,window=window,pdata=pdata)\n",
    "    # prerr(\"-->  1 day candelstics is ok <--\")\n",
    "async def do_whattime(TimestampAll):\n",
    "    TimestampAll.append(pd.to_datetime(ex.fetchTime(),unit='ms'))\n",
    "    \n",
    "async def async_instant_full_data(pair,exchange=ex,window=WINDOW_SIZE):\n",
    "    start = timeit.default_timer()\n",
    "    pdata=pd.DataFrame()\n",
    "    btcdata=pd.DataFrame()\n",
    "    #async tascs\n",
    "    TimestampAll=[]\n",
    "    task_pdata=asyncio.create_task(do_pdata(pair=pair,exchange=exchange,window=window,pdata=pdata))\n",
    "    task_btcdata=asyncio.create_task(do_pdata(pair=\"BTC/USDT\",exchange=exchange,window=window,pdata=btcdata))\n",
    "    task_whattime=asyncio.create_task(do_whattime(TimestampAll)) \n",
    "    #Timestamp=pd.to_datetime(ex.fetchTime(),unit='ms')\n",
    "    await asyncio.wait([task_pdata, task_btcdata, task_whattime])\n",
    "    Timestamp=TimestampAll[0]\n",
    "    btcdata=btcdata.add_prefix(\"BTC_\")\n",
    "    pdata=pd.concat([pdata,btcdata],axis=1)\n",
    "    pdata.loc[0,\"day\"]=Timestamp.dayofweek+1\n",
    "    pdata.loc[0,\"hour\"]=Timestamp.hour\n",
    "    pdata.loc[0,\"minute\"]=Timestamp.minute\n",
    "    stop = timeit.default_timer()\n",
    "    print(\"async time for \"+str(pair)+\" :\"+str(stop-start))\n",
    "    try:\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MetaData[MetaData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    except:\n",
    "        MData=get_crypto_metadata([pair.split(\"/\")[0]+\"/USDT\"])\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MData[MData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    for key in pdata.keys():\n",
    "        if key.find(\"BTC\")!=-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"BTC_price\"]-pdata[key])/pdata[\"BTC_price\"]\n",
    "        if key.find(\"BTC\")==-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"price\"]-pdata[key])/pdata[\"price\"]\n",
    "    return pdata\n",
    "\n",
    "async def do_async_instant_full_data(pdata,pair,exchange=ex,window=WINDOW_SIZE):\n",
    "    \n",
    "    start = timeit.default_timer()\n",
    "    #pdata=pd.DataFrame()\n",
    "    btcdata=pd.DataFrame()\n",
    "    #async tascs\n",
    "    TimestampAll=[] \n",
    "    task_pdata=asyncio.create_task(do_pdata(pair=pair,exchange=exchange,window=window,pdata=pdata))\n",
    "    task_btcdata=asyncio.create_task(do_pdata(pair=\"BTC/USDT\",exchange=exchange,window=window,pdata=btcdata))\n",
    "    task_whattime=asyncio.create_task(do_whattime(TimestampAll)) \n",
    "    #Timestamp=pd.to_datetime(ex.fetchTime(),unit='ms')\n",
    "    await asyncio.wait([task_pdata, task_btcdata, task_whattime])\n",
    "    Timestamp=TimestampAll[0]\n",
    "    btcdata=btcdata.add_prefix(\"BTC_\")\n",
    "    #pdata=pd.concat([pdata,btcdata],axis=1,copy=False)\n",
    "    #pdata.join(btcdata)\n",
    "    for k in btcdata.keys():\n",
    "        pdata.loc[0,str(k)]=btcdata[str(k)][0]\n",
    "    pdata.loc[0,\"day\"]=Timestamp.dayofweek+1\n",
    "    pdata.loc[0,\"hour\"]=Timestamp.hour\n",
    "    pdata.loc[0,\"minute\"]=Timestamp.minute\n",
    "    stop = timeit.default_timer()\n",
    "    print(\"async time for \"+str(pair)+\" :\"+str(stop-start))\n",
    "    try:\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MetaData[MetaData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    except:\n",
    "        MData=get_crypto_metadata([pair.split(\"/\")[0]+\"/USDT\"])\n",
    "        pdata.loc[0,\"lunch_day\"]=int(-(pd.to_datetime(MData[MData[\"Pair\"] == (pair.split(\"/\")[0]+\"/USDT\")][\"launch_minute\"])-pd.Timestamp('2020-01-01 00:00:00.000000')).dt.days)\n",
    "    for key in pdata.keys():\n",
    "        if key.find(\"BTC\")!=-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"BTC_price\"]-pdata[key])/pdata[\"BTC_price\"]\n",
    "        if key.find(\"BTC\")==-1 and (key.find(\"open\")!=-1 or\n",
    "        key.find(\"high\")!=-1 or key.find(\"low\")!=-1 or key.find(\"close\")!=-1):\n",
    "            pdata[key]=(pdata[\"price\"]-pdata[key])/pdata[\"price\"]\n",
    "\n",
    "async def get_all_data_for(list_pair=Binance_USDT_HALAL,exchange=ex,window=WINDOW_SIZE):\n",
    "    #loop init data dic\n",
    "    data_dic={}\n",
    "    for pair in list_pair:\n",
    "        data_dic[pair]=pd.DataFrame()\n",
    "    \n",
    "    ###loop tasklist\n",
    "    task_list=[]\n",
    "    for pair in list_pair:\n",
    "        task_list.append(   asyncio.create_task(do_async_instant_full_data(pair=pair,exchange=exchange,window=window,pdata=data_dic[pair]))   )\n",
    "    await asyncio.wait(task_list)\n",
    "\n",
    "    return(data_dic)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "#import ccxt.async_support as ccxt2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "pdata=await async_instant_full_data(pair=\"LUNA/BUSD\",exchange=ex,window=WINDOW_SIZE)\n",
    "## minimum 1.4 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>close-1</th>\n",
       "      <th>close-1_5min</th>\n",
       "      <th>close-1_hour</th>\n",
       "      <th>close-2_hour</th>\n",
       "      <th>close-1_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19552.08</td>\n",
       "      <td>19554.98</td>\n",
       "      <td>19553.88</td>\n",
       "      <td>19563.12</td>\n",
       "      <td>19632.33</td>\n",
       "      <td>19632.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price   close-1  close-1_5min  close-1_hour  close-2_hour  close-1_day\n",
       "0  19552.08  19554.98      19553.88      19563.12      19632.33     19632.33"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdata0=instant_pair_data(pair=\"BTC/BUSD\",exchange=ex,window=WINDOW_SIZE)\n",
    "pdata0[[\"price\",\"close-1\",\"close-1_5min\",\"close-1_hour\",\"close-2_hour\",\"close-1_day\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>high-1</th>\n",
       "      <th>low-1</th>\n",
       "      <th>open-1</th>\n",
       "      <th>close-1</th>\n",
       "      <th>high-2</th>\n",
       "      <th>low-2</th>\n",
       "      <th>open-2</th>\n",
       "      <th>close-2</th>\n",
       "      <th>volume-2</th>\n",
       "      <th>...</th>\n",
       "      <th>high-9_5min</th>\n",
       "      <th>low-9_5min</th>\n",
       "      <th>open-9_5min</th>\n",
       "      <th>close-9_5min</th>\n",
       "      <th>volume-9_5min</th>\n",
       "      <th>high-10_5min</th>\n",
       "      <th>low-10_5min</th>\n",
       "      <th>open-10_5min</th>\n",
       "      <th>close-10_5min</th>\n",
       "      <th>volume-10_5min</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19300.59</td>\n",
       "      <td>19313.48</td>\n",
       "      <td>19298.0</td>\n",
       "      <td>19311.28</td>\n",
       "      <td>19300.43</td>\n",
       "      <td>19312.24</td>\n",
       "      <td>19294.74</td>\n",
       "      <td>19302.85</td>\n",
       "      <td>19311.27</td>\n",
       "      <td>57.14182</td>\n",
       "      <td>...</td>\n",
       "      <td>19416.0</td>\n",
       "      <td>19401.13</td>\n",
       "      <td>19406.34</td>\n",
       "      <td>19413.27</td>\n",
       "      <td>123.00862</td>\n",
       "      <td>19411.54</td>\n",
       "      <td>19394.04</td>\n",
       "      <td>19398.01</td>\n",
       "      <td>19406.63</td>\n",
       "      <td>172.26802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 246 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      price    high-1    low-1    open-1   close-1    high-2     low-2  \\\n",
       "0  19300.59  19313.48  19298.0  19311.28  19300.43  19312.24  19294.74   \n",
       "\n",
       "     open-2   close-2  volume-2  ...  high-9_5min  low-9_5min  open-9_5min  \\\n",
       "0  19302.85  19311.27  57.14182  ...      19416.0    19401.13     19406.34   \n",
       "\n",
       "   close-9_5min  volume-9_5min  high-10_5min  low-10_5min  open-10_5min  \\\n",
       "0      19413.27      123.00862      19411.54     19394.04      19398.01   \n",
       "\n",
       "   close-10_5min  volume-10_5min  \n",
       "0       19406.63       172.26802  \n",
       "\n",
       "[1 rows x 246 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdata0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../Data/10_Testing.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [34], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m fulldata\u001b[38;5;241m=\u001b[39m\u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m../Data/10_Testing.csv\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mindex_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mnrows\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m200\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mdrop(columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msell\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbs\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbuy\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n",
      "File \u001b[0;32m/usr/lib/python3/dist-packages/pandas/io/parsers.py:688\u001b[0m, in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    635\u001b[0m     engine_specified \u001b[39m=\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[1;32m    637\u001b[0m kwds\u001b[39m.\u001b[39mupdate(\n\u001b[1;32m    638\u001b[0m     delimiter\u001b[39m=\u001b[39mdelimiter,\n\u001b[1;32m    639\u001b[0m     engine\u001b[39m=\u001b[39mengine,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    685\u001b[0m     skip_blank_lines\u001b[39m=\u001b[39mskip_blank_lines,\n\u001b[1;32m    686\u001b[0m )\n\u001b[0;32m--> 688\u001b[0m \u001b[39mreturn\u001b[39;00m _read(filepath_or_buffer, kwds)\n",
      "File \u001b[0;32m/usr/lib/python3/dist-packages/pandas/io/parsers.py:454\u001b[0m, in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    451\u001b[0m _validate_names(kwds\u001b[39m.\u001b[39mget(\u001b[39m\"\u001b[39m\u001b[39mnames\u001b[39m\u001b[39m\"\u001b[39m, \u001b[39mNone\u001b[39;00m))\n\u001b[1;32m    453\u001b[0m \u001b[39m# Create the parser.\u001b[39;00m\n\u001b[0;32m--> 454\u001b[0m parser \u001b[39m=\u001b[39m TextFileReader(fp_or_buf, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwds)\n\u001b[1;32m    456\u001b[0m \u001b[39mif\u001b[39;00m chunksize \u001b[39mor\u001b[39;00m iterator:\n\u001b[1;32m    457\u001b[0m     \u001b[39mreturn\u001b[39;00m parser\n",
      "File \u001b[0;32m/usr/lib/python3/dist-packages/pandas/io/parsers.py:948\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39m\"\u001b[39m\u001b[39mhas_index_names\u001b[39m\u001b[39m\"\u001b[39m \u001b[39min\u001b[39;00m kwds:\n\u001b[1;32m    946\u001b[0m     \u001b[39mself\u001b[39m\u001b[39m.\u001b[39moptions[\u001b[39m\"\u001b[39m\u001b[39mhas_index_names\u001b[39m\u001b[39m\"\u001b[39m] \u001b[39m=\u001b[39m kwds[\u001b[39m\"\u001b[39m\u001b[39mhas_index_names\u001b[39m\u001b[39m\"\u001b[39m]\n\u001b[0;32m--> 948\u001b[0m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_make_engine(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mengine)\n",
      "File \u001b[0;32m/usr/lib/python3/dist-packages/pandas/io/parsers.py:1180\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1178\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_make_engine\u001b[39m(\u001b[39mself\u001b[39m, engine\u001b[39m=\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mc\u001b[39m\u001b[39m\"\u001b[39m):\n\u001b[1;32m   1179\u001b[0m     \u001b[39mif\u001b[39;00m engine \u001b[39m==\u001b[39m \u001b[39m\"\u001b[39m\u001b[39mc\u001b[39m\u001b[39m\"\u001b[39m:\n\u001b[0;32m-> 1180\u001b[0m         \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_engine \u001b[39m=\u001b[39m CParserWrapper(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mf, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49m\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49moptions)\n\u001b[1;32m   1181\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[1;32m   1182\u001b[0m         \u001b[39mif\u001b[39;00m engine \u001b[39m==\u001b[39m \u001b[39m\"\u001b[39m\u001b[39mpython\u001b[39m\u001b[39m\"\u001b[39m:\n",
      "File \u001b[0;32m/usr/lib/python3/dist-packages/pandas/io/parsers.py:2010\u001b[0m, in \u001b[0;36mCParserWrapper.__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2007\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39musecols, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39musecols_dtype \u001b[39m=\u001b[39m _validate_usecols_arg(kwds[\u001b[39m\"\u001b[39m\u001b[39musecols\u001b[39m\u001b[39m\"\u001b[39m])\n\u001b[1;32m   2008\u001b[0m kwds[\u001b[39m\"\u001b[39m\u001b[39musecols\u001b[39m\u001b[39m\"\u001b[39m] \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39musecols\n\u001b[0;32m-> 2010\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_reader \u001b[39m=\u001b[39m parsers\u001b[39m.\u001b[39;49mTextReader(src, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwds)\n\u001b[1;32m   2011\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39munnamed_cols \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_reader\u001b[39m.\u001b[39munnamed_cols\n\u001b[1;32m   2013\u001b[0m passed_names \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mnames \u001b[39mis\u001b[39;00m \u001b[39mNone\u001b[39;00m\n",
      "File \u001b[0;32mpandas/_libs/parsers.pyx:382\u001b[0m, in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/parsers.pyx:674\u001b[0m, in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../Data/10_Testing.csv'"
     ]
    }
   ],
   "source": [
    "fulldata=pd.read_csv(\"../Data/10_Testing.csv\",index_col=0,nrows=200).drop(columns=[\"sell\",'bs',\"buy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "fd=fulldata.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "synctime for GMT/BUSD :6.344005106002442\n"
     ]
    }
   ],
   "source": [
    "pdata=instant_full_data(pair=\"GMT/BUSD\",exchange=ex,window=WINDOW_SIZE)\n",
    "## minimum 1.6 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>high-1</th>\n",
       "      <th>low-1</th>\n",
       "      <th>open-1</th>\n",
       "      <th>close-1</th>\n",
       "      <th>high-2</th>\n",
       "      <th>low-2</th>\n",
       "      <th>open-2</th>\n",
       "      <th>close-2</th>\n",
       "      <th>volume-2</th>\n",
       "      <th>...</th>\n",
       "      <th>BTC_volume-9_5min</th>\n",
       "      <th>BTC_high-10_5min</th>\n",
       "      <th>BTC_low-10_5min</th>\n",
       "      <th>BTC_open-10_5min</th>\n",
       "      <th>BTC_close-10_5min</th>\n",
       "      <th>BTC_volume-10_5min</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>minute</th>\n",
       "      <th>lunch_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.6444</td>\n",
       "      <td>0.000155</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.000155</td>\n",
       "      <td>0.001086</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.001086</td>\n",
       "      <td>103.0</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.00589</td>\n",
       "      <td>-0.005029</td>\n",
       "      <td>-0.005297</td>\n",
       "      <td>-0.005646</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>-798.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 496 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price    high-1     low-1    open-1   close-1    high-2     low-2  \\\n",
       "0  0.6444  0.000155  0.000931  0.000931  0.000155  0.001086  0.001241   \n",
       "\n",
       "     open-2   close-2  volume-2  ...  BTC_volume-9_5min  BTC_high-10_5min  \\\n",
       "0  0.001241  0.001086     103.0  ...          395.61304          -0.00589   \n",
       "\n",
       "   BTC_low-10_5min  BTC_open-10_5min  BTC_close-10_5min  BTC_volume-10_5min  \\\n",
       "0        -0.005029         -0.005297          -0.005646           336.38133   \n",
       "\n",
       "   day  hour  minute  lunch_day  \n",
       "0  6.0   5.0    46.0     -798.0  \n",
       "\n",
       "[1 rows x 496 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "async time for GMT/USDT :6.945886764005991\n",
      "async time for ETH/USDT :3.852053343987791\n",
      "async time for MOB/USDT :3.113739014006569\n",
      "async time for ETC/USDT :3.10366006399272\n",
      "async time for JASMY/USDT :3.112807943005464\n",
      "async time for RVN/USDT :3.1322447860002285\n",
      "async time for XMR/USDT :3.123452197003644\n",
      "async time for DOGE/USDT :3.137205488004838\n",
      "async time for GMT/USDT :4.364328334995662\n",
      "async time for ETH/USDT :3.1055146899889223\n",
      "async time for MOB/USDT :3.104436956011341\n",
      "async time for ETC/USDT :3.127022492000833\n",
      "async time for JASMY/USDT :3.1280384450074052\n",
      "async time for RVN/USDT :7.4869875040021725\n",
      "async time for XMR/USDT :3.744398966009612\n",
      "async time for DOGE/USDT :3.1388034179981332\n",
      "async time for GMT/USDT :5.7121570560120745\n",
      "async time for ETH/USDT :4.9688134680036455\n",
      "async time for MOB/USDT :3.1265761140093673\n",
      "async time for ETC/USDT :3.132268246001331\n",
      "async time for JASMY/USDT :3.1628909849969205\n",
      "async time for RVN/USDT :3.7358436829963466\n",
      "async time for XMR/USDT :3.160533572008717\n",
      "async time for DOGE/USDT :3.1551413949928246\n",
      "async time for GMT/USDT :5.044897856001626\n",
      "async time for ETH/USDT :4.992479877008009\n",
      "async time for MOB/USDT :3.142631947004702\n",
      "async time for ETC/USDT :3.117651566004497\n",
      "async time for JASMY/USDT :3.1730175510019762\n",
      "async time for RVN/USDT :3.1334429440030362\n",
      "async time for XMR/USDT :3.1243441269907635\n",
      "async time for DOGE/USDT :3.174013391995686\n",
      "async time for GMT/USDT :5.007498341001337\n",
      "async time for ETH/USDT :4.354827639006544\n",
      "async time for MOB/USDT :3.784134449000703\n",
      "async time for ETC/USDT :3.1540934460063\n",
      "async time for JASMY/USDT :3.150128958004643\n",
      "async time for RVN/USDT :4.444814331000089\n",
      "async time for XMR/USDT :5.5915313759905985\n",
      "async time for DOGE/USDT :3.146654522002791\n",
      "async time for GMT/USDT :4.392445623001549\n",
      "async time for ETH/USDT :5.0794501720083645\n",
      "async time for MOB/USDT :3.7801206320000347\n",
      "async time for ETC/USDT :3.2515622089995304\n",
      "async time for JASMY/USDT :3.1532049419911345\n",
      "async time for RVN/USDT :3.2016852209926583\n",
      "async time for XMR/USDT :3.199472945998423\n",
      "async time for DOGE/USDT :3.193353996000951\n",
      "async time for GMT/USDT :5.668882047990337\n",
      "async time for ETH/USDT :3.779568105004728\n",
      "async time for MOB/USDT :3.757931596992421\n",
      "async time for ETC/USDT :3.1569468999950914\n",
      "async time for JASMY/USDT :3.2261528680101037\n",
      "async time for RVN/USDT :3.1533155659999466\n",
      "async time for XMR/USDT :3.0979026060085744\n",
      "async time for DOGE/USDT :3.187267183995573\n",
      "async time for GMT/USDT :5.6654057309933705\n",
      "async time for ETH/USDT :5.1012802430050215\n",
      "async time for MOB/USDT :3.157567634989391\n",
      "async time for ETC/USDT :3.226803885001573\n",
      "async time for JASMY/USDT :5.0074734650115715\n",
      "async time for RVN/USDT :5.019987851002952\n",
      "async time for XMR/USDT :4.372903272989788\n",
      "async time for DOGE/USDT :3.1633204860117985\n",
      "async time for GMT/USDT :6.927779161997023\n",
      "async time for ETH/USDT :3.7234500869963085\n",
      "async time for MOB/USDT :3.1231793719925918\n",
      "async time for ETC/USDT :3.159559015999548\n",
      "async time for JASMY/USDT :3.2252786419994663\n",
      "async time for RVN/USDT :3.117138804998831\n",
      "async time for XMR/USDT :3.1347421709942864\n",
      "async time for DOGE/USDT :3.1841807650052942\n",
      "async time for GMT/USDT :5.603696170001058\n",
      "async time for ETH/USDT :4.336411456009955\n",
      "async time for MOB/USDT :3.0947455419955077\n",
      "async time for ETC/USDT :4.451470327010611\n",
      "async time for JASMY/USDT :3.8238241780054523\n",
      "async time for RVN/USDT :3.154409716997179\n",
      "async time for XMR/USDT :3.1062709809921216\n",
      "async time for DOGE/USDT :3.1124035450047813\n",
      "async time for GMT/USDT :3.110367478002445\n",
      "async time for ETH/USDT :3.144797398999799\n",
      "async time for MOB/USDT :6.211174520998611\n",
      "async time for ETC/USDT :3.7828403679886833\n",
      "async time for JASMY/USDT :3.1184710919915233\n",
      "async time for RVN/USDT :3.13602966099279\n",
      "async time for XMR/USDT :3.7593678870034637\n",
      "async time for DOGE/USDT :3.7584545870049624\n",
      "async time for GMT/USDT :4.992731211998034\n",
      "async time for ETH/USDT :5.611672416998772\n",
      "async time for MOB/USDT :3.139126550988294\n",
      "async time for ETC/USDT :3.067456068005413\n",
      "async time for JASMY/USDT :3.052080665001995\n",
      "async time for RVN/USDT :3.0788821639871458\n",
      "async time for XMR/USDT :3.066782288995455\n",
      "async time for DOGE/USDT :3.051387284998782\n",
      "async time for GMT/USDT :5.560213335993467\n",
      "async time for ETH/USDT :4.357616615990992\n",
      "async time for MOB/USDT :3.0413080899888882\n",
      "async time for ETC/USDT :3.1036602620006306\n",
      "async time for JASMY/USDT :3.081789182004286\n",
      "async time for RVN/USDT :3.083871864990215\n",
      "async time for XMR/USDT :3.061348593008006\n",
      "async time for DOGE/USDT :3.056955876003485\n",
      "async time for GMT/USDT :4.309488653001608\n",
      "async time for ETH/USDT :5.560685853997711\n",
      "async time for MOB/USDT :3.1009041000070283\n",
      "async time for ETC/USDT :4.923965449997922\n",
      "async time for JASMY/USDT :5.577857731012045\n",
      "async time for RVN/USDT :3.0637089560041204\n",
      "async time for XMR/USDT :3.074883952998789\n",
      "async time for DOGE/USDT :3.078673622003407\n",
      "async time for GMT/USDT :6.807160502998158\n",
      "async time for ETH/USDT :3.6843088750028983\n",
      "async time for MOB/USDT :3.0812346340098884\n",
      "async time for ETC/USDT :3.06981622899184\n",
      "async time for JASMY/USDT :3.67961015200126\n",
      "async time for RVN/USDT :3.0801731449901126\n",
      "async time for XMR/USDT :3.0485786459903466\n",
      "async time for DOGE/USDT :3.0496712189924438\n",
      "async time for GMT/USDT :6.184474648995092\n",
      "async time for ETH/USDT :4.370438174999435\n",
      "async time for MOB/USDT :3.7195609379996313\n",
      "async time for ETC/USDT :3.105362058005994\n",
      "async time for JASMY/USDT :3.682287144998554\n",
      "async time for RVN/USDT :3.0577372330008075\n",
      "async time for XMR/USDT :3.0633352779987035\n",
      "async time for DOGE/USDT :6.17589406199113\n",
      "async time for GMT/USDT :3.0630375940090744\n",
      "async time for ETH/USDT :3.668552358998568\n",
      "async time for MOB/USDT :8.051649843007908\n",
      "async time for ETC/USDT :3.6891967890114756\n",
      "async time for JASMY/USDT :3.064914693997707\n",
      "async time for RVN/USDT :3.057161509001162\n",
      "async time for XMR/USDT :3.0612167149956804\n",
      "async time for DOGE/USDT :3.0726900390000083\n",
      "async time for GMT/USDT :6.543333380002878\n",
      "async time for ETH/USDT :3.8571871830063174\n",
      "async time for MOB/USDT :3.154370143005508\n",
      "async time for ETC/USDT :3.217037820009864\n",
      "async time for JASMY/USDT :3.066130327002611\n",
      "async time for RVN/USDT :3.100299725003424\n",
      "async time for XMR/USDT :3.0619997899921145\n",
      "async time for DOGE/USDT :3.118987006993848\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [47], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m600\u001b[39m):\n\u001b[0;32m----> 2\u001b[0m     pdata\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mconcat([pdata,\u001b[38;5;28;01mawait\u001b[39;00m async_instant_full_data(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGMT/USDT\u001b[39m\u001b[38;5;124m\"\u001b[39m,exchange\u001b[38;5;241m=\u001b[39mex,window\u001b[38;5;241m=\u001b[39mWINDOW_SIZE)],axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m      3\u001b[0m     pdata\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mconcat([pdata,\u001b[38;5;28;01mawait\u001b[39;00m async_instant_full_data(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mETH/USDT\u001b[39m\u001b[38;5;124m\"\u001b[39m,exchange\u001b[38;5;241m=\u001b[39mex,window\u001b[38;5;241m=\u001b[39mWINDOW_SIZE)],axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m      4\u001b[0m     pdata\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mconcat([pdata,\u001b[38;5;28;01mawait\u001b[39;00m async_instant_full_data(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMOB/USDT\u001b[39m\u001b[38;5;124m\"\u001b[39m,exchange\u001b[38;5;241m=\u001b[39mex,window\u001b[38;5;241m=\u001b[39mWINDOW_SIZE)],axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n",
      "Cell \u001b[0;32mIn [30], line 205\u001b[0m, in \u001b[0;36masync_instant_full_data\u001b[0;34m(pair, exchange, window)\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[38;5;66;03m#Timestamp=pd.to_datetime(ex.fetchTime(),unit='ms')\u001b[39;00m\n\u001b[1;32m    204\u001b[0m \u001b[38;5;28;01mawait\u001b[39;00m asyncio\u001b[38;5;241m.\u001b[39mwait([task_pdata, task_btcdata, task_whattime])\n\u001b[0;32m--> 205\u001b[0m Timestamp\u001b[38;5;241m=\u001b[39m\u001b[43mTimestampAll\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m    206\u001b[0m btcdata\u001b[38;5;241m=\u001b[39mbtcdata\u001b[38;5;241m.\u001b[39madd_prefix(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBTC_\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    207\u001b[0m pdata\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mconcat([pdata,btcdata],axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "for i in range(600):\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"GMT/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"ETH/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"MOB/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"ETC/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"JASMY/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"RVN/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"XMR/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    pdata=pd.concat([pdata,await async_instant_full_data(\"DOGE/USDT\",exchange=ex,window=WINDOW_SIZE)],axis=0)\n",
    "    time.sleep(45)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>high-1</th>\n",
       "      <th>low-1</th>\n",
       "      <th>open-1</th>\n",
       "      <th>close-1</th>\n",
       "      <th>high-2</th>\n",
       "      <th>low-2</th>\n",
       "      <th>open-2</th>\n",
       "      <th>close-2</th>\n",
       "      <th>volume-2</th>\n",
       "      <th>...</th>\n",
       "      <th>BTC_volume-9_5min</th>\n",
       "      <th>BTC_high-10_5min</th>\n",
       "      <th>BTC_low-10_5min</th>\n",
       "      <th>BTC_open-10_5min</th>\n",
       "      <th>BTC_close-10_5min</th>\n",
       "      <th>BTC_volume-10_5min</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>minute</th>\n",
       "      <th>lunch_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.64440</td>\n",
       "      <td>0.000155</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.000155</td>\n",
       "      <td>0.001086</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.001086</td>\n",
       "      <td>103.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.005890</td>\n",
       "      <td>-0.005029</td>\n",
       "      <td>-0.005297</td>\n",
       "      <td>-0.005646</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>-798.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.64470</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>0.000465</td>\n",
       "      <td>0.000310</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>16042.4000</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.005879</td>\n",
       "      <td>-0.005018</td>\n",
       "      <td>-0.005286</td>\n",
       "      <td>-0.005635</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>-798.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1326.41000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.000008</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>64.7866</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.005830</td>\n",
       "      <td>-0.004968</td>\n",
       "      <td>-0.005237</td>\n",
       "      <td>-0.005586</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>867.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.87600</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.005888</td>\n",
       "      <td>-0.005027</td>\n",
       "      <td>-0.005295</td>\n",
       "      <td>-0.005644</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>-849.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>27.70000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.001444</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.001444</td>\n",
       "      <td>191.2300</td>\n",
       "      <td>...</td>\n",
       "      <td>395.61304</td>\n",
       "      <td>-0.005715</td>\n",
       "      <td>-0.004853</td>\n",
       "      <td>-0.005122</td>\n",
       "      <td>-0.005471</td>\n",
       "      <td>336.38133</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>568.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>27.69000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.3800</td>\n",
       "      <td>...</td>\n",
       "      <td>1062.69692</td>\n",
       "      <td>-0.003185</td>\n",
       "      <td>0.001326</td>\n",
       "      <td>-0.002448</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>3354.49504</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>568.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00661</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>4782.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>1062.69692</td>\n",
       "      <td>-0.003194</td>\n",
       "      <td>0.001316</td>\n",
       "      <td>-0.002458</td>\n",
       "      <td>0.000183</td>\n",
       "      <td>3354.49504</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>-691.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.03625</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000828</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000552</td>\n",
       "      <td>-0.000828</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.000552</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18131.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>1062.69692</td>\n",
       "      <td>-0.003175</td>\n",
       "      <td>0.001335</td>\n",
       "      <td>-0.002439</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>3354.49504</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>148.20000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000675</td>\n",
       "      <td>0.000675</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.8160</td>\n",
       "      <td>...</td>\n",
       "      <td>1062.69692</td>\n",
       "      <td>-0.003186</td>\n",
       "      <td>0.001324</td>\n",
       "      <td>-0.002450</td>\n",
       "      <td>0.000191</td>\n",
       "      <td>3354.49504</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>292.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.06107</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>-0.000655</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>-0.000655</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>143529.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>1062.69692</td>\n",
       "      <td>-0.003106</td>\n",
       "      <td>0.001404</td>\n",
       "      <td>-0.002369</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>3354.49504</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>145 rows × 496 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         price    high-1     low-1    open-1   close-1    high-2     low-2  \\\n",
       "0      0.64440  0.000155  0.000931  0.000931  0.000155  0.001086  0.001241   \n",
       "0      0.64470 -0.000155 -0.000155 -0.000155 -0.000155 -0.000155  0.000465   \n",
       "0   1326.41000  0.000000  0.000008  0.000000  0.000000 -0.000008  0.000075   \n",
       "0      0.87600  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "0     27.70000  0.000000  0.001083  0.001083  0.000000  0.001083  0.001444   \n",
       "..         ...       ...       ...       ...       ...       ...       ...   \n",
       "0     27.69000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "0      0.00661  0.000151  0.000151  0.000151  0.000151  0.000151  0.000151   \n",
       "0      0.03625  0.000000  0.000828  0.000000  0.000552 -0.000828  0.000000   \n",
       "0    148.20000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000675   \n",
       "0      0.06107  0.000000  0.000164  0.000000  0.000164 -0.000655  0.000164   \n",
       "\n",
       "      open-2   close-2     volume-2  ...  BTC_volume-9_5min  BTC_high-10_5min  \\\n",
       "0   0.001241  0.001086     103.0000  ...          395.61304         -0.005890   \n",
       "0   0.000310 -0.000155   16042.4000  ...          395.61304         -0.005879   \n",
       "0   0.000060  0.000008      64.7866  ...          395.61304         -0.005830   \n",
       "0   0.000000  0.000000       0.0000  ...          395.61304         -0.005888   \n",
       "0   0.001083  0.001444     191.2300  ...          395.61304         -0.005715   \n",
       "..       ...       ...          ...  ...                ...               ...   \n",
       "0   0.000000  0.000000      21.3800  ...         1062.69692         -0.003185   \n",
       "0   0.000151  0.000151    4782.0000  ...         1062.69692         -0.003194   \n",
       "0  -0.000552  0.000000   18131.0000  ...         1062.69692         -0.003175   \n",
       "0   0.000675  0.000000      10.8160  ...         1062.69692         -0.003186   \n",
       "0  -0.000655  0.000164  143529.0000  ...         1062.69692         -0.003106   \n",
       "\n",
       "    BTC_low-10_5min  BTC_open-10_5min  BTC_close-10_5min  BTC_volume-10_5min  \\\n",
       "0         -0.005029         -0.005297          -0.005646           336.38133   \n",
       "0         -0.005018         -0.005286          -0.005635           336.38133   \n",
       "0         -0.004968         -0.005237          -0.005586           336.38133   \n",
       "0         -0.005027         -0.005295          -0.005644           336.38133   \n",
       "0         -0.004853         -0.005122          -0.005471           336.38133   \n",
       "..              ...               ...                ...                 ...   \n",
       "0          0.001326         -0.002448           0.000193          3354.49504   \n",
       "0          0.001316         -0.002458           0.000183          3354.49504   \n",
       "0          0.001335         -0.002439           0.000202          3354.49504   \n",
       "0          0.001324         -0.002450           0.000191          3354.49504   \n",
       "0          0.001404         -0.002369           0.000272          3354.49504   \n",
       "\n",
       "    day  hour  minute  lunch_day  \n",
       "0   6.0   5.0    46.0     -798.0  \n",
       "0   6.0   5.0    48.0     -798.0  \n",
       "0   6.0   5.0    48.0      867.0  \n",
       "0   6.0   5.0    48.0     -849.0  \n",
       "0   6.0   5.0    48.0      568.0  \n",
       "..  ...   ...     ...        ...  \n",
       "0   6.0   6.0    10.0      568.0  \n",
       "0   6.0   6.0    10.0     -691.0  \n",
       "0   6.0   6.0    10.0       98.0  \n",
       "0   6.0   6.0    10.0      292.0  \n",
       "0   6.0   6.0    10.0      180.0  \n",
       "\n",
       "[145 rows x 496 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "livecsv=pd.read_csv(\"livetest.csv\",index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "lc=livecsv.drop(columns=['volume','BTC_volume','volume-1','BTC_volume-1','volume-1_day','BTC_volume-1_day','volume-1_hour','BTC_volume-1_hour','volume-1_5min','BTC_volume-1_5min','volume-1_15min','BTC_volume-1_15min',])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "lc2=lc.drop(columns=['bs','buy','sell'])\n",
    "lc2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "lc2.iloc[0:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "pdata2.iloc[0:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "dt=pdata.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "dtt=normalize(dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "nfd=normalize(fd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "fulldata\n",
    "f1=fulldata[0:1].copy()\n",
    "f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "pd2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "pdata2.iloc[0]['high-1_hour']\n",
    "pd2=pdata2[0:1].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'model' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241m.\u001b[39mpredict(tf\u001b[38;5;241m.\u001b[39mconvert_to_tensor(dtt, dtype\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mfloat32))\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m2.4926202e-01\u001b[39m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
     ]
    }
   ],
   "source": [
    "model.predict(tf.convert_to_tensor(dtt, dtype=tf.float32))-2.4926202e-01\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "model.predict(nfd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "Buy_Dessision_Multi_In_Out(dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "for k in fulldata.keys():\n",
    "    if k not in pdata.keys():\n",
    "        print(f\"different: {k}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# pdata=instant_full_data(\"MOB/USDT\",exchange=ex,window=WINDOW_SIZE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# pdata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# data_dic=await get_all_data_for(list_pair=Binance_USDT_HALAL[1:5],exchange=ex,window=WINDOW_SIZE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "# pdata=data_dic['GMT/USDT']\n",
    "# pdata=pdata[~pdata.isnull().any(axis=1)]\n",
    "Buy_Dessision(pdata.iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "GoodDeal=[]\n",
    "BadDeal=[]\n",
    "pair=\"ETH/USDT\"\n",
    "min_win_percent=BUY_PERCENT\n",
    "max_time_window=MAX_FORCAST_SIZE\n",
    "window=WINDOW_SIZE\n",
    "while True:\n",
    "    break_out_flag = False\n",
    "    for pair in Binance_USDT_HALAL[2:13]:\n",
    "        pdata=await async_instant_full_data(pair,exchange=ex,window=WINDOW_SIZE)\n",
    "        if int(Buy_Dessision(pdata.iloc[0])) == 1:\n",
    "            print(\"Good : \" +pair)\n",
    "            print(\"buying at\"+str(pdata[\"price\"].iloc[0]))\n",
    "            bt=pd.to_datetime(ex.fetchTime(),unit='ms')\n",
    "            pp=0\n",
    "            for i in range(max_time_window*2):\n",
    "                time.sleep(30)\n",
    "                pp=ex.fetch_ticker(pair)['info']['askPrice']\n",
    "                if((float(pdata.loc[0,\"price\"])*0.01*min_win_percent+float(pdata.loc[0,\"price\"])) <= float(pp)):\n",
    "                    GoodDeal.append({\"pair\":pair,\n",
    "                                     \"buying_time\":bt,\n",
    "                                     \"buying_price\":float(pdata[\"price\"].iloc[0]),\n",
    "                                     \"Selling_time\":pd.to_datetime(ex.fetchTime(),unit='ms'),\n",
    "                                     \"selling_price\":float(pp)})\n",
    "                    print(\"+++ wining bought at:\"+str(pdata.loc[0,\"price\"]) +\" sold at: \"+str(pp) )\n",
    "                    break_out_flag = True\n",
    "                    break       \n",
    "            if break_out_flag:break\n",
    "            pp=ex.fetch_ticker(pair)['info']['askPrice']\n",
    "            print(\"--- losing bought at: \"+str(pdata.loc[0,\"price\"]) +\" sold at: \"+str(pp) )\n",
    "            BadDeal.append({\"pair\":pair,\n",
    "                                     \"buying_time\":bt,\n",
    "                                     \"buying_price\":float(pdata[\"price\"].iloc[0]),\n",
    "                                     \"Selling_time\":pd.to_datetime(ex.fetchTime(),unit='ms'),\n",
    "                                     \"selling_price\":float(pp)})\n",
    "            \n",
    "    #time.sleep(30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [],
   "source": [
    "GoodDeal"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "875f36f95367728e9e1ed7321fa85119a0c86f1195820c7e047475fcf301cc07"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
